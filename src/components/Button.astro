---
const { list } = Astro.props;
---

<!-- Wrap the component elements in our custom element “astro-heart”. -->
<randomize-button style="position:relative"  data-list={JSON.stringify(list)}>
    <span style=" transition: opacity .5s ease-out; visibility: none; opacity: 0; border-radius: 10px; border: 1px solid; padding: 10px; right:0; background-color: white; position: absolute; top: -10px; width: max-content; transform: translateY(-55%)"></span>
    <button class="mt-3 focus:outline-none text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900" aria-label="Heart">
        Randomize
    </button> 
   
</randomize-button>
  
  <script>
    // Define the behaviour for our new type of HTML element.
    class Randomizer extends HTMLElement {
      constructor() {
        super();
  
        const randomButton = this.querySelector('button');
        const displaySpan = this.querySelector('span');
        const list = JSON.parse(this.dataset.list);
        const highlightColorClasses = ["!bg-purple-600", "text-white"];
        // Each time the button is clicked, update the count.
        randomButton.addEventListener('click', () => {
            const randomNumber = Math.floor(Math.random()*list.length);
            const randomItem = list[randomNumber];
            const allRows = document.querySelectorAll('tr');
            const row = document.getElementById(`row${randomNumber}`)
            displaySpan.style.opacity = 0;
            displaySpan.textContent = randomItem.name;
            displaySpan.style.opacity = 1;
            allRows.forEach((row) => {
                row.classList.remove(...highlightColorClasses);
            })
            row.classList.add(...highlightColorClasses);

        });
      }
    }
  
    customElements.define('randomize-button', Randomizer);
  </script>